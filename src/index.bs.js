// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list.js");
var $$Array    = require("bs-platform/lib/js/array.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var Mysql      = require("bs-mysql/src/Mysql.bs.js");
var Js_exn     = require("bs-platform/lib/js/js_exn.js");
var Express    = require("bs-express/src/express.js");
var Js_json    = require("bs-platform/lib/js/js_json.js");
var Process    = require("process");
var Caml_obj   = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

console.log("Hello, BuckleScript and Reason!");

var slop2 = /* SomeFace */["Plumbum"];

function greeting(person) {
  if (person) {
    return "Oh it's that prick " + person[0];
  } else {
    return "No fucking idea pal";
  }
}

var slopName1 = greeting(/* NoFace */0);

var slopName2 = greeting(slop2);

console.log("Hello " + slopName1);

console.log("And also hello to " + slopName2);

var listFace = /* :: */[
  /* :: */[
    1,
    /* :: */[
      2,
      /* :: */[
        3,
        /* [] */0
      ]
    ]
  ],
  /* :: */[
    /* :: */[
      4,
      /* :: */[
        5,
        /* :: */[
          6,
          /* [] */0
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        7,
        /* :: */[
          8,
          /* :: */[
            9,
            /* [] */0
          ]
        ]
      ],
      /* [] */0
    ]
  ]
];

function $$double(x) {
  return (x << 1);
}

function doubleList(param) {
  return List.map($$double, param);
}

function doubleMap(param) {
  return List.map(doubleList, param);
}

var newList = doubleMap(listFace);

List.map((function (x) {
        console.log($$Array.of_list(x));
        return /* () */0;
      }), newList);

var conn = Mysql.createConnection(/* Some */["127.0.0.1"], /* Some */[3306], /* Some */["helloegg"], /* Some */["niceegg"], /* Some */["itistheegg"], /* () */0);

function fetchLevel() {
  conn.query("SELECT * FROM levels WHERE levelID=1", (function (error, results, fields) {
          if (error == null) {
            console.log(results);
            console.log(fields);
            return /* () */0;
          } else {
            console.log(error.message);
            return /* () */0;
          }
        }));
  return /* () */0;
}

fetchLevel(1);

conn.end();

function plop() {
  console.log("plop");
  return /* () */0;
}

function checkProperty(req, next, property, k) {
  var match = req[property];
  if (match !== undefined) {
    var match$1 = Js_json.decodeBoolean(match);
    if (match$1 && Caml_obj.caml_equal(match$1[0], true)) {
      return Curry._1(k, /* () */0);
    } else {
      return Curry._1(next, Express.Next[/* route */1]);
    }
  } else {
    return Curry._1(next, Express.Next[/* route */1]);
  }
}

function checkProperties(req, next, properties, k) {
  var aux = function (properties) {
    if (properties) {
      var tl = properties[1];
      return checkProperty(req, next, properties[0], (function () {
                    return aux(tl);
                  }));
    } else {
      return Curry._1(k, /* () */0);
    }
  };
  return aux(properties);
}

function setProperty(req, property) {
  req[property] = true;
  return /* () */0;
}

function getDictString(dict, key) {
  var match = dict[key];
  if (match !== undefined) {
    return Js_json.decodeString(match);
  } else {
    return /* None */0;
  }
}

function getDictNumber(dict, key) {
  var match = dict[key];
  if (match !== undefined) {
    return Js_json.decodeNumber(match);
  } else {
    return /* None */0;
  }
}

function makeSuccessJson() {
  var json = { };
  json["success"] = true;
  return json;
}

function makeFailureJson() {
  var json = { };
  json["failure"] = true;
  return json;
}

function makeCantFindJson(i) {
  var json = { };
  json["Could not find id"] = i;
  return json;
}

var app = Express.express(/* () */0);

app.get("/", (function (_, res, _$1) {
        return res.json(makeSuccessJson(/* () */0));
      }));

app.get("/levels/:levelID", /* array */[(function (req, res, next) {
          var match = getDictString(req.params, "levelID");
          if (match) {
            var i = match[0];
            if (i === "123") {
              return res.json(makeSuccessJson(/* () */0));
            } else {
              return res.json(makeCantFindJson(i));
            }
          } else {
            return Curry._1(next, Express.Next[/* route */1]);
          }
        })]);

app.get("/baseUrl", (function (req, res, next) {
        var match = req.baseUrl;
        if (match === "") {
          return res.json(makeSuccessJson(/* () */0));
        } else {
          return Curry._1(next, Express.Next[/* route */1]);
        }
      }));

function onListen(port, e) {
  var exit = 0;
  var val;
  try {
    val = e;
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Js_exn.$$Error) {
      console.log(exn[1]);
      Process.exit(1);
      return /* () */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    console.log("Listening at http://127.0.0.1:" + Pervasives.string_of_int(port));
    return /* () */0;
  }
  
}

Express.App[/* listen */0](app, /* None */0, /* Some */[(function (param) {
          return onListen(3000, param);
        })], /* () */0);

var slop1 = /* NoFace */0;

exports.slop1            = slop1;
exports.slop2            = slop2;
exports.greeting         = greeting;
exports.slopName1        = slopName1;
exports.slopName2        = slopName2;
exports.listFace         = listFace;
exports.$$double         = $$double;
exports.doubleList       = doubleList;
exports.doubleMap        = doubleMap;
exports.newList          = newList;
exports.conn             = conn;
exports.fetchLevel       = fetchLevel;
exports.plop             = plop;
exports.checkProperty    = checkProperty;
exports.checkProperties  = checkProperties;
exports.setProperty      = setProperty;
exports.getDictString    = getDictString;
exports.getDictNumber    = getDictNumber;
exports.makeSuccessJson  = makeSuccessJson;
exports.makeFailureJson  = makeFailureJson;
exports.makeCantFindJson = makeCantFindJson;
exports.app              = app;
exports.onListen         = onListen;
/*  Not a pure module */
